What happens when you initialize a repository? Why do you need to do it?

    It creates de folder .git with the data associated with git for a empty repository.
    To do it, you must execute the command "git init", and to see the status of the 
    new repository "git status".


How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is where the files and documents that are going to be part of a commit
    stay before being commited. The working directory shows you all the elements you have 
    to work with, being part of the repository or not. And the repository keeps the commits 
    you make from the staging area.


How can you use the staging area to make sure you have one commit per logical
change?

    You can add the files you modified of that only logical change, commit that, and 
    later add the rest of the logical changes and commit them separately.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    When you want to implement some new features without touching the main project. Or
    when you want to try something else. This way you can manipulate and keep track of
    the changes and improvements without changing the main project.


How do the diagrams help you visualize the branch structure?

    The diagrams help to see the connections between branches and to see if what commits
    you can touch without interacting with others (and what previous information can you
    work with)


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    The result is a unified path, where the files are merged into new ones with all the
    features of both branches. It is represented in the diagram with the lines connecting
    them in the points where their paths were separeted and united again. This way gives 
    us information of the different commits that were made in each path. 
    

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

    Pros automatic: it saves time in the simple cases.
    Pros manual: you ensure that the code merged it's the right one.
    Cons automatic: it could merge wrongly some parts of the files.
    Cons manual: it could be eternal.
